// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package server

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 6, 9, 15, 40, 26, 0, time.UTC),
		},
		"/readme.html": &vfsgen۰CompressedFileInfo{
			name:             "readme.html",
			modTime:          time.Date(2018, 6, 12, 15, 8, 39, 0, time.UTC),
			uncompressedSize: 3930,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\xdb\x6e\xdb\x38\x13\xbe\xff\x9f\x62\xa0\x02\xfd\x6f\x64\x49\x4e\x50\xa4\x70\x15\xff\x68\x5c\x34\xed\x8f\x24\x5b\x34\x4d\xf6\x9a\x16\x47\x16\x37\x14\xc9\x25\x47\x3e\x34\x08\xb0\x0f\xb1\x4f\xb8\x4f\xb2\xa0\xe4\xa3\x2c\xbb\x29\xda\x4a\x37\x24\x67\x34\xa7\x6f\x0e\x54\x5a\x50\x29\x87\xff\x01\x00\x48\x0b\x64\xbc\x59\xd6\x5b\x12\x24\x71\x38\x1a\x69\x29\xd9\x04\xe1\x9f\xbf\xfe\x86\x4c\x2b\xb2\x62\x5c\x91\xb6\x90\x35\xe7\x0e\x72\x6d\xe1\x52\x10\x58\x34\xda\x09\xd2\x56\xa0\x4b\xe3\xe6\xeb\x8d\xb4\x12\x89\x81\x62\x25\x9e\x07\x1c\x5d\x66\x85\x21\xa1\x55\x50\x8b\x44\x45\xe7\xc1\x5a\xd1\x04\x15\x5a\x46\xe8\xe0\xf6\xfe\x72\xa3\x46\xe7\xc0\x76\xf5\x2c\xfe\xeb\xb6\x2d\x72\x51\x10\x6f\x29\x74\xb4\xd8\x36\xc0\x3f\x51\x2e\x99\x2b\x7a\x25\x3a\xe7\x15\x3d\xee\x10\xfd\x33\x66\xd9\xc3\xc4\xea\x4a\xf1\x5e\xa6\xa5\xb6\x03\x78\x91\x27\x79\x9e\xe7\x6f\xf6\x58\x4b\x66\x27\x42\x0d\x20\xd9\x27\x19\xc6\xb9\x50\x93\x01\xf4\x2d\x96\xfb\x64\xc2\x39\xf5\x98\x14\x13\x35\x80\x0c\x15\xa1\xdd\xe5\x79\xda\xd9\x79\x50\xd0\x76\xd8\xca\x85\x33\x92\x2d\x06\x90\x4b\x9c\xef\x6b\xa9\x15\xf4\x04\x61\xe9\xbe\x43\x4d\x44\x6c\x22\x85\xea\x8a\xcd\xda\xab\x04\x92\xe8\xac\xd3\xb3\x55\xcc\xce\xce\xce\xf6\x89\xb9\x56\xd4\x73\xe2\x2b\x0e\xa0\x1f\x9d\x74\x7e\x5f\xb3\xcc\x50\x4c\x0a\x1a\xc0\x58\x4b\x7e\xcc\xe2\xb1\xe6\x8b\x67\x42\x88\xfe\x3d\xa0\x2e\x67\xa5\x90\x8b\x01\xf4\x98\x31\x12\x7b\x6e\xe1\x08\xcb\xf0\x42\x0a\xf5\x70\xcd\xb2\xdb\x7a\xfb\x5e\x2b\x0a\x83\x5b\x9c\x68\x84\xbb\x8f\x41\xf8\x59\x8f\x35\xe9\xf0\xb7\xf9\x62\x82\xaa\x77\xcb\x94\x0b\xef\xc6\x95\xa2\x2a\x1c\x31\x45\xcc\xa2\x94\x61\xf0\x01\xe5\x14\x49\x64\x0c\x6e\xb0\xc2\x20\x74\x4c\xb9\x9e\x43\x2b\x3a\x92\x69\x65\x69\x3f\xf3\x6f\x57\xb2\xcd\x7b\x33\xc1\xa9\x18\xc0\x59\x92\x98\x0e\xb8\xd7\xe9\x08\xac\x22\x7d\x2c\x6e\xa6\x23\x68\xdb\xd8\x74\x22\xe3\x73\xa2\x57\x2c\x91\xe9\x47\x27\xaf\x8e\x69\xc8\x34\x7f\x6e\x71\xbd\xf2\xef\xe1\x78\x24\xc9\xb1\xf2\x4a\xea\x34\x82\x24\x3a\x3d\x9c\x4d\x2b\x78\x3f\xaa\x4c\x2b\xa7\x25\x23\x16\xc2\xa8\x59\xba\x10\x82\xb7\x8a\x33\x89\x70\xad\x95\x86\xdf\xbf\x04\xbb\x27\x7e\x7b\x55\x65\x82\xb3\xf6\xd6\x63\x0e\x5f\x16\x06\x67\x56\x10\x5a\x4f\x79\x87\x7f\xb0\xfb\xaa\xa1\xac\xb8\x2f\x04\x39\xb2\xc8\x4a\xb8\x47\xcb\x76\x69\x57\x62\xec\xdb\x9c\xd0\x6a\x7d\x74\x23\xca\x71\xd5\x70\xc0\x55\x10\xfa\x05\xcb\x74\x08\xc1\x48\x57\x56\xa0\x85\x1b\x9c\x05\xde\xfc\x7a\x17\x42\xa9\x95\x76\x86\x65\x87\x72\x7b\x89\x68\x3b\x38\xad\x7c\xb0\x5d\x60\xe9\x29\xda\x5c\xea\x59\x6f\x3e\x00\x97\x59\x2d\xe5\x31\x19\xc4\xc6\xb2\x13\x72\x6d\x39\xda\x5e\xdd\xc3\x8d\xc3\x01\xac\x56\x3f\x92\xc0\x54\x84\x40\xfc\xa0\xb6\x01\xbc\x40\x44\xe8\x9b\x39\x38\x2d\x05\x3f\x9a\x40\xfb\x7d\xac\xa5\x8b\x47\x86\x59\x56\x22\x75\xf6\xe0\xef\x6b\xe5\xb9\xd6\xdd\x62\x1a\xdf\x7b\xa4\xcd\xa1\xfa\x5b\x9a\x7c\x8c\x65\x0b\xf1\x24\x7a\xfd\x83\x93\x27\x8d\xb7\xc6\x67\x1a\x6f\x6e\x06\xa9\x6f\xbb\x5b\x53\xb6\x99\x1b\xbb\x63\x36\x2d\xfa\xeb\x6b\x43\x1a\x17\xfd\x16\xd5\x40\x26\x99\x73\xe7\xc1\x72\xd6\x04\xc3\xd1\xf3\xaf\x15\x66\x4b\x77\xdc\x56\xfe\xf8\x08\x22\x07\x85\x10\xbd\xf7\x83\xfe\x7a\x39\xe7\x83\x00\x9e\x9e\x36\x6a\x77\x2e\x01\xc1\xf0\xf1\xb1\xc5\xfe\xf4\xe4\xd5\x3c\x3e\xa2\xe2\x4f\x5b\x11\x31\xc3\x9f\x70\x43\xd9\x75\xc0\x0c\x2f\x05\x7d\xa8\xc6\x20\x1c\xb8\xca\x18\x6d\x09\x79\xe4\x45\x5c\xb1\x31\x30\xc5\xe1\x42\xd0\x45\x95\x3d\x20\xad\xe8\x50\xfa\x1e\x0c\x63\x04\xc6\x39\x72\xc0\x29\x2a\xaa\x98\x94\x8b\x96\xec\xe2\x64\x78\xe7\x1a\x00\x4e\x76\x54\xfe\xbf\x72\xe4\x3f\x06\x2a\x70\xcb\x52\xb8\xfb\x7c\x55\xab\x4c\x7d\xfb\x1e\xee\x58\xed\xa6\x93\x34\xae\x8f\x81\x74\xfd\x1d\x2a\xee\xdd\xf5\x4b\xae\x4b\x26\x54\x7d\xb5\x0b\x41\x8a\x07\x04\x2a\x84\x1b\xb4\x3c\xb5\x38\x6c\x04\x17\x44\xc6\x0d\xe2\x38\x5b\x86\x2d\x9a\x66\x91\x9b\xc4\x13\x41\x45\x35\x8e\x32\x5d\xc6\x53\x26\x51\x91\x50\xb8\xe6\x89\x0f\x58\x93\xc6\x5e\xee\x96\xcf\xa7\xc3\x4f\xab\x6a\x75\x69\x5c\x9c\x0e\x3b\xe1\x5b\x86\xd2\xc1\xba\xb4\x1d\x08\x55\x3b\xf3\x67\x85\x76\x01\x8e\xac\x50\x13\xef\x6b\x56\x39\xd2\xa5\x70\x58\x53\x57\xb8\xf3\x1a\x77\x51\x7a\xf3\xe1\xad\x94\xdb\x82\x98\x45\xd0\xf5\xdd\x96\xc9\x3d\xb8\xdf\x6b\x0b\x38\x67\xa5\x91\xf8\x6b\x03\xf4\x3f\x77\xde\x4f\x92\x97\xe6\xfc\xec\xe5\xec\xfc\x2c\x49\x0e\x04\xac\xee\xdb\xad\xf2\xa4\x56\x35\x37\x87\xc5\x26\xb2\x70\xc3\x4a\x4c\x63\x2a\xba\xf9\xde\x6d\x6e\xf7\xfb\x4c\x69\xdc\x16\x7f\x40\x1f\x5f\x55\xeb\x3a\xb4\xc1\x32\x3e\x6e\x95\x8a\xf1\x32\x55\x7d\xcf\x5b\xfb\x47\xbc\x53\xda\xf0\x56\x7c\xc5\x55\xc6\x6e\xff\xc5\xb0\x29\x23\x66\x5d\xe8\x13\xc0\x88\x39\x4a\x17\xc1\x3b\xcc\x59\x25\xc9\xf9\x04\x78\x9d\x98\x79\xb4\x2f\xf6\x27\xf8\x61\xda\x7e\x2c\x7b\xfc\x37\x5d\xf9\xd4\xf0\xc1\x18\x69\x86\xa8\x00\x59\x56\x74\xf8\x74\xd0\xa5\x57\xbf\xca\xa3\x59\xdb\xa3\xfa\xca\xfa\x4d\x7f\xae\xd9\x5c\x94\x55\x09\x35\xf7\x0a\xa3\x4d\xa9\xd5\x65\x76\x04\x9f\xe7\x00\x94\xc6\xad\x4c\x4f\x9b\x59\x3c\x1c\x69\xb3\xb0\x75\x47\x7d\x99\x69\xb3\x78\x03\x27\x49\xff\x35\xdc\xaf\x0a\x0c\x46\x11\x5c\x89\x0c\x95\x43\x0e\x95\xf2\x7f\x48\xde\xb8\xb7\x97\x9f\xae\x60\x7a\x1a\xa5\xf1\x52\xcc\x72\x4c\x36\xb3\x31\x8d\xeb\x7f\xea\x7f\x03\x00\x00\xff\xff\x35\x9f\x9a\xda\x5a\x0f\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/readme.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr: gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
