// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package server

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 6, 9, 15, 40, 26, 0, time.UTC),
		},
		"/readme.html": &vfsgen۰CompressedFileInfo{
			name:             "readme.html",
			modTime:          time.Date(2018, 6, 9, 19, 39, 38, 0, time.UTC),
			uncompressedSize: 3839,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\xdb\x6e\xdb\x38\x13\xbe\xff\x9f\x62\xa0\x02\xfd\x6f\x74\x72\x82\x22\x85\xaa\x78\xd1\xb8\x68\xda\x45\x92\x2d\x9a\x26\x7b\x4d\x89\x23\x89\x1b\x8a\xe4\x92\x94\x0f\x0d\x02\xec\x43\xec\x13\xee\x93\x2c\x28\x5b\x3e\xc8\xb2\x9b\xa2\x5b\xfb\x46\xd4\x8c\x66\xe6\x9b\x6f\x0e\x52\x5a\xd9\x9a\x8f\xff\x07\x00\x90\x56\x48\xe8\xf2\xb2\x3d\x5a\x66\x39\x6e\xce\xee\x37\x99\x48\xce\x49\x89\xf0\xcf\x5f\x7f\x43\x2e\x85\xd5\x2c\x6b\xac\xd4\x90\x2f\xef\x1b\x28\xa4\x86\x4b\x66\x41\xa3\x92\x86\x59\xa9\x19\x9a\x8d\xc9\xa8\x67\x33\x35\x76\xd1\xf7\x11\x16\x9c\x98\x2a\xa8\xd1\x18\xe7\xe9\x71\x47\xe8\x7e\x19\xc9\x1f\x4a\x2d\x1b\x41\x83\x5c\x72\xa9\x13\x78\x51\xc4\x45\x51\x14\x6f\xf6\x54\x6b\xa2\x4b\x26\x12\x88\xf7\x45\x8a\x50\xca\x44\x99\xc0\x48\x63\xbd\x2f\xb6\x38\xb7\x01\xe1\xac\x14\x09\xe4\x28\x2c\xea\x5d\x9d\xa7\x9d\x93\xcb\x1c\xea\x81\x58\x29\x33\x8a\x93\x45\x02\x05\xc7\xf9\xbe\x97\xd6\x41\xc0\x2c\xd6\xe6\x3b\xdc\x84\x96\x94\x9c\x89\xa1\xdc\xac\x51\xc5\x10\x87\x67\x83\xc8\xba\x9c\x9d\x9d\x9d\xed\x0b\x0b\x29\x6c\x60\xd8\x57\x4c\x60\x14\x9e\x0c\x3e\xdf\xaa\xcc\x90\x95\x95\x4d\x20\x93\x9c\x1e\x8b\x38\x93\x74\xf1\x4c\x0a\xd1\xfd\x0f\xb8\x2b\x48\xcd\xf8\x22\x81\x80\x28\xc5\x31\x30\x0b\x63\xb1\xf6\x2f\x38\x13\x0f\xd7\x24\xbf\x6d\x8f\xef\xa5\xb0\xbe\x77\x8b\xa5\x44\xb8\xfb\xe8\xf9\x9f\x65\x26\xad\xf4\x7f\x9b\x2f\x4a\x14\xc1\x2d\x11\xc6\xbf\xcb\x1a\x61\x1b\x7f\x42\x84\x25\x1a\x39\xf7\xbd\x0f\xc8\xa7\x68\x59\x4e\xe0\x06\x1b\xf4\x7c\x43\x84\x09\x0c\x6a\x36\x50\x4c\x5d\xa4\xa3\xdc\xfd\x87\x8a\x6d\x1e\xcc\x18\xb5\x55\x02\x67\x71\xac\x06\xe8\x5e\x97\x23\x90\xc6\xca\x63\x79\x53\x03\x49\xdb\xe6\x66\x90\x19\x57\x13\x41\xb5\x62\x66\x14\x9e\xbc\x3a\xe6\x21\x97\xf4\xb9\xcd\xf5\xca\xfd\x0f\xe7\x23\x8e\x8f\xb5\x57\xdc\x96\x11\xc4\xe1\xe9\xe1\x6a\xea\xe8\xfd\x28\x72\x29\x8c\xe4\xc4\x12\x1f\x26\xcb\x4b\xe3\x83\xf7\x56\x50\xc2\x11\xae\xa5\x90\xf0\xfb\x17\x6f\xf7\x8e\x3b\x5e\x35\x39\xa3\xa4\x7f\x74\x9c\xc3\x97\x85\xc2\x99\x66\x16\xb5\x93\xbc\xc3\x3f\xc8\x7d\xb3\x94\x74\xda\x17\xcc\x1a\xab\x91\xd4\x70\x8f\x9a\xec\xca\xae\x58\x86\x9a\x58\x26\xc5\xfa\xd6\x0d\xab\xb3\x66\xa9\x01\x57\x9e\xef\x2e\x48\x2e\x7d\xf0\x26\xb2\xd1\x0c\x35\xdc\xe0\xcc\x73\xe1\xb7\x27\x1f\x6a\x29\xa4\x51\x24\x3f\x54\xdb\x2b\x46\xfb\xc9\xe9\xd5\x83\x1e\x22\x4b\x4e\x51\x17\x5c\xce\x82\x79\x02\x26\xd7\x92\xf3\x63\x36\x2c\xc9\xf8\x20\xe5\x52\x53\xd4\x41\x3b\xc2\x95\xc1\x04\xba\xab\x1f\x29\x60\x5b\xf9\x60\xe9\x41\x6f\x09\xbc\x40\x44\x18\xa9\x39\x18\xc9\x19\x3d\x5a\x40\xfb\x73\xac\xe7\x8b\x86\x8a\x68\x52\xa3\x1d\x9c\xc1\xdf\x37\xca\x0b\x29\x87\xcd\x2c\xb1\x07\x56\xaa\x43\xfd\xb7\x0a\xf9\x98\xca\x16\xe3\x71\xf8\xfa\x07\x37\x4f\x1a\x6d\xad\xcf\x34\xda\xac\xef\xd4\x8d\xdd\xad\x2d\xbb\xdc\x1b\xbb\x6b\x36\xad\x46\xe3\x6e\x9d\xa7\x51\x35\xea\x49\x15\xe4\x9c\x18\x73\xee\xad\x76\x8d\x37\x9e\x3c\x77\xdd\xa7\x91\xda\xf2\x1d\xf5\x9d\x3f\x3e\x02\x2b\x40\x20\x84\xef\xdd\xa2\xbf\x5e\xed\x79\xcf\x83\xa7\xa7\x8d\xdb\x9d\x97\x00\x6f\xfc\xf8\xd8\x53\x7f\x7a\x72\x6e\x1e\x1f\x51\xd0\xa7\xad\x8c\xa8\x35\x26\x28\x51\xb8\xd6\x45\x03\xb7\xf7\x97\x9b\x88\x65\x01\x64\x37\xe4\xc5\xff\xcd\xf6\xbb\x8c\x09\x77\x01\xa8\xf1\x25\xb3\x1f\x9a\x0c\x98\x01\xd3\x28\x25\xb5\x45\x1a\x3a\x13\x57\x24\x03\x22\x28\x5c\x30\x7b\xd1\xe4\x0f\x68\x3b\x39\xd4\x6e\x06\x43\x86\x40\x28\x45\x0a\x38\x45\x61\x1b\xc2\xf9\xa2\x67\xbb\x3a\x19\xdf\x99\x25\x01\x27\x3b\x2e\x7f\x6d\x8c\x75\x0f\x83\xad\x70\x2b\x52\xb8\xfb\x7c\xd5\xba\x4c\xdd\xf8\x1e\xef\x44\x6d\xa6\x65\x1a\xb5\xb7\xc1\xca\xf6\x39\x14\xd4\xc1\x75\x97\x54\xd6\x84\x09\x10\xa4\x46\x1f\x38\x7b\x40\xb0\x15\x33\x49\x0f\xa9\xc6\xf1\xd2\x70\x65\xad\x32\x49\x14\xe5\xab\xb4\x85\xd3\x3c\x34\x65\x54\x32\x5b\x35\x59\x98\xcb\x3a\x9a\x12\x8e\xc2\x32\x81\x6b\x9d\xe8\x40\x34\x69\xe4\xec\x6e\x61\x3e\x1d\x7f\xea\xba\xd5\xa4\x51\x75\x3a\x1e\xa4\x6f\x95\x4a\x03\xeb\xd6\x36\xc0\x44\x0b\xe6\xcf\x06\xf5\x02\x8c\xd5\x4c\x94\x0e\x6b\xde\x18\x2b\x6b\x66\xb0\x95\x76\xbc\xd3\x96\x77\x56\xbb\xf0\xe1\x2d\xe7\xdb\x86\x88\x46\x90\xca\x8d\x75\xc2\xf7\xe8\x7e\x2f\x35\xe0\x9c\xd4\x8a\xe3\xcf\x4d\xd0\x2f\xe6\x7c\x14\xc7\x2f\xd5\xf9\xd9\xcb\xd9\xf9\x59\x1c\x1f\x48\x58\x3b\xb7\x7b\xed\x69\x7b\xdd\xbc\xbc\x59\x6d\x32\x0b\x37\xa4\xc6\x34\xb2\xd5\xb0\xde\x3b\x34\xb9\x66\x6d\x06\xf6\x95\xd2\xa8\x6f\xfe\x80\x3f\xda\x75\xeb\x3a\xb5\xde\x2a\x3f\xa6\x2b\xc5\x68\x55\xaa\x6e\xe6\xad\xf1\x59\x3a\x68\x6d\x7c\xcb\xbe\x62\x57\xb1\xdb\x5f\x17\x64\x4a\x2c\xd1\xc6\x77\x05\xa0\xd8\x1c\xb9\x09\xe1\x1d\x16\xa4\xe1\xd6\xb8\x02\x78\x1d\xab\x79\xb8\x6f\xf6\x3f\xc0\xa1\xfa\x38\x56\x33\xfe\x9b\x50\x3e\x2d\xf5\x20\x43\x3b\x43\x14\x80\x24\xaf\x06\x30\x1d\x84\xf4\xea\x67\x21\x9a\xf5\x11\xb5\xaf\xac\xdf\xc4\x73\x4d\xe6\xac\x6e\x6a\x68\xb5\x3b\x8e\x36\xad\xd6\xb6\xd9\x11\x7e\x9e\x43\x50\x1a\xf5\x2a\x3d\x5d\xee\xe2\xf1\x44\xaa\x85\x6e\x27\xea\xcb\x5c\xaa\xc5\x1b\x38\x89\x47\xaf\xe1\xbe\x6b\x30\x98\x84\x70\xc5\x72\x14\x06\x29\x34\xc2\x7d\x21\xb9\xe0\xde\x5e\x7e\xba\x82\xe9\x69\x98\x46\x2b\x33\xab\x35\xb9\xdc\x8d\x69\xd4\x7e\xf8\xfe\x1b\x00\x00\xff\xff\x9d\x82\x2e\x02\xff\x0e\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/readme.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr: gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
